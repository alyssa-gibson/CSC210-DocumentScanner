/* Name(s): Alyssa Gibson, Christy Nguyen
   Class: CSC210: Data Structures & Algorithms
   Assignment: Use a binary search tree to count and organize the amount of
			   instances of words in "Alice in Wonderland".
*/

/* -----REQUIRED METHODS:-----
   [X]  CONSTRUCTOR(S)  - Alyssa
 		    Initializes the class (3 pts)
   [X]  SET VALUE 		- Alyssa
   			Sets the value of the current node (4 pts)
   [X]  SET LEFT CHILD  - Alyssa
   			Sets the left child pointer of the current node (4 pts)
   [X]  SET RIGHT CHILD - Alyssa
   			Sets the right child pointer of the current node (4 pts)
   [X]  GET VALUE 		- Alyssa
   			Gets the value of the current node (4 pts)
   [X]  GET LEFT CHILD  - Alyssa
   			Returns the left child pointer of the current node (4 pts)
   [X]  GET RIGHT CHILD - Alyssa
   			Returns the right child pointer of the current node (4 pts)
 */

public class BinarySearchTreeNode {
	
	private String value;		// The word parsed
	private int count, hash;	// The amount of time the value has appeared;
								// The hash value generated by the word's contents
	private BinarySearchTreeNode left_child, right_child; 
								// left and right children of the BSTNode
	
	// ---CONSTRUCTORS---
	public BinarySearchTreeNode() {
		// Null constructor
		value = null;
		count = 0;
		left_child = null;
		right_child = null;
		
	}
	
	public BinarySearchTreeNode(String s) {
		// Constructor creating a BSTNode using a String
		value = s;
		count = 1;
		left_child = null;
		right_child = null;
		
	}
	// ------------------
	
	// ---SET METHODS----
	public void setValue(String s) {
		value = s;
	}
	
	public void setHash(int x) {
		hash = x;
	}
	
	public void setLeftChild(BinarySearchTreeNode n) {
		left_child = n;
	}
	
	public void setRightChild(BinarySearchTreeNode n) {
		right_child = n;
	}
	// ------------------
	
	// ---GET METHODS----
	public String getValue() {
		return value;
	}
	
	public int getCount() {
		return count;
	}
	
	public int getHash() {
		return hash;
	}
	
	public BinarySearchTreeNode getLeftChild() {
		return left_child;
	}
	
	public BinarySearchTreeNode getRightChild() {
		return right_child;
	}
	// ---GET METHODS----
	
	// ---OTHER METHODS--
	public void increment() {
		count++;
	}
	// ------------------
	
}
